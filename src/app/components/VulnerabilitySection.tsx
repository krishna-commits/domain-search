import React from 'react';

interface VulnerabilitySectionProps {
  threats: any;
  vulnerabilities: any[];
}

export default function VulnerabilitySection({ threats, vulnerabilities }: VulnerabilitySectionProps) {
  return (
    <div className="bg-white shadow rounded-lg overflow-hidden mt-6">
      <h2 className="text-xl font-bold bg-gray-50 px-4 py-3 border-b">Threats & Vulnerabilities</h2>
      
      <div className="px-4 py-5 sm:p-6">
        <div className="mb-6">
          <h3 className="text-lg font-medium text-gray-900 mb-3">Malicious Activity</h3>
          {threats.urlhaus ? (
            <div className={`p-4 rounded-md ${threats.urlhaus.query_status === 'ok' ? 'bg-red-50 border border-red-200' : 'bg-green-50 border border-green-200'}`}>
              <div className="flex justify-between items-center">
                <span className="font-medium">
                  URLhaus Status: 
                </span>
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                  threats.urlhaus.query_status === 'ok' ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'
                }`}>
                  {threats.urlhaus.query_status === 'ok' ? 'Malicious Activity Detected' : 'No Threats Found'}
                </span>
              </div>
              
              {threats.urlhaus.query_status === 'ok' && (
                <div className="mt-3">
                  <p className="text-sm text-gray-700">
                    This domain has been reported for malicious activity via URLhaus.
                  </p>
                  <div className="mt-2">
                    <h4 className="text-sm font-medium text-gray-700">Details:</h4>
                    <ul className="list-disc pl-5 mt-1 text-sm text-gray-600">
                      <li>First seen: {threats.urlhaus.firstseen}</li>
                      <li>Last seen: {threats.urlhaus.lastseen}</li>
                      <li>Malware URLs: {threats.urlhaus.url_count}</li>
                    </ul>
                  </div>
                </div>
              )}
            </div>
          ) : (
            <p className="text-gray-500">Threat data unavailable</p>
          )}
        </div>
        
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-3">Known Vulnerabilities</h3>
          {vulnerabilities.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Severity</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {vulnerabilities.slice(0, 10).map((vuln, index) => (
                    <tr key={index}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        <a 
                          href={`https://vulners.com/${vuln._source.type}/${vuln._source.id}`} 
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-indigo-600 hover:underline"
                        >
                          {vuln._source.title}
                        </a>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          vuln._source.cvss.score >= 7 ? 'bg-red-100 text-red-800' :
                          vuln._source.cvss.score >= 4 ? 'bg-yellow-100 text-yellow-800' :
                          'bg-green-100 text-green-800'
                        }`}>
                          {vuln._source.cvss.score.toFixed(1)} - {vuln._source.severity}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {vuln._source.type}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <p className="text-gray-500">No known vulnerabilities found</p>
          )}
        </div>
      </div>
    </div>
  );
}